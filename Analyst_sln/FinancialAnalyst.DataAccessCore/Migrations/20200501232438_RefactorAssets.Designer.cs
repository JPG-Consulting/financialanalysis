// <auto-generated />
using System;
using FinancialAnalyst.Common.Entities.Assets;
using FinancialAnalyst.DataAccess.Portfolios;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace FinancialAnalyst.DataAccess.Migrations
{
    [DbContext(typeof(DummyPortfoliosContext))]
    [Migration("20200501232438_RefactorAssets")]
    partial class RefactorAssets
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("FinancialAnalyst.Common.Entities.Assets.AssetBase", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssetClass")
                        .HasColumnType("int");

                    b.Property<int?>("Exchange")
                        .HasColumnType("int");

                    b.Property<decimal?>("LastPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("LastPrice_Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Ticker")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("Ticker")
                        .IsUnique();

                    b.ToTable("Assets");

                    b.HasDiscriminator<int>("AssetClass");
                });

            modelBuilder.Entity("FinancialAnalyst.Common.Entities.Portfolios.AssetAllocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Costs")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Percentage")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("PriceDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("TheoricalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("TheoricalPriceDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("PortfolioId");

                    b.ToTable("AssetAllocations");
                });

            modelBuilder.Entity("FinancialAnalyst.Common.Entities.Portfolios.Portfolio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Cash")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("InitialBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsSimulated")
                        .HasColumnType("bit");

                    b.Property<decimal?>("MarketValue")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("TotalCosts")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Portfolios");
                });

            modelBuilder.Entity("FinancialAnalyst.Common.Entities.Portfolios.PortfolioBalance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("NetCashBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PortfolioId")
                        .HasColumnType("int");

                    b.Property<string>("TransactionCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("PortfolioId");

                    b.ToTable("PortfolioBalances");
                });

            modelBuilder.Entity("FinancialAnalyst.Common.Entities.Portfolios.Transaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<int>("CashflowType")
                        .HasColumnType("int");

                    b.Property<decimal>("Commission")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("NetCashBalance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("PortfolioId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<decimal?>("RegFee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TransactionCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.HasIndex("PortfolioId");

                    b.HasIndex("UserId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("FinancialAnalyst.Common.Entities.Prices.HistoricalPrice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("AdjustedClose")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("AssetId")
                        .HasColumnType("int");

                    b.Property<decimal>("Close")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("High")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Low")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("Open")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Volume")
                        .HasColumnType("decimal(20,0)");

                    b.HasKey("Id");

                    b.HasIndex("AssetId");

                    b.ToTable("HistoricalPrices");
                });

            modelBuilder.Entity("FinancialAnalyst.Common.Entities.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FinancialAnalyst.Common.Entities.Assets.Bond", b =>
                {
                    b.HasBaseType("FinancialAnalyst.Common.Entities.Assets.AssetBase");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("FinancialAnalyst.Common.Entities.Assets.Cash", b =>
                {
                    b.HasBaseType("FinancialAnalyst.Common.Entities.Assets.AssetBase");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("FinancialAnalyst.Common.Entities.Assets.ETF", b =>
                {
                    b.HasBaseType("FinancialAnalyst.Common.Entities.Assets.AssetBase");

                    b.HasDiscriminator().HasValue(4);
                });

            modelBuilder.Entity("FinancialAnalyst.Common.Entities.Assets.Option", b =>
                {
                    b.HasBaseType("FinancialAnalyst.Common.Entities.Assets.AssetBase");

                    b.Property<double?>("Ask")
                        .HasColumnType("float");

                    b.Property<double?>("Bid")
                        .HasColumnType("float");

                    b.Property<double?>("Change")
                        .HasColumnType("float");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("OpenInterest")
                        .HasColumnType("int");

                    b.Property<int>("OptionClass")
                        .HasColumnType("int");

                    b.Property<double>("Strike")
                        .HasColumnType("float");

                    b.Property<double?>("TheoricalValue")
                        .HasColumnType("float");

                    b.Property<int>("UnderlyingAssetId")
                        .HasColumnType("int");

                    b.Property<int?>("Volume")
                        .HasColumnType("int");

                    b.HasIndex("UnderlyingAssetId");

                    b.HasDiscriminator().HasValue(5);
                });

            modelBuilder.Entity("FinancialAnalyst.Common.Entities.Assets.Stock", b =>
                {
                    b.HasBaseType("FinancialAnalyst.Common.Entities.Assets.AssetBase");

                    b.Property<string>("CompanyName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Volatility")
                        .HasColumnType("float");

                    b.Property<string>("WebSite")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("FinancialAnalyst.Common.Entities.Portfolios.AssetAllocation", b =>
                {
                    b.HasOne("FinancialAnalyst.Common.Entities.Assets.AssetBase", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinancialAnalyst.Common.Entities.Portfolios.Portfolio", null)
                        .WithMany("AssetAllocations")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FinancialAnalyst.Common.Entities.Portfolios.Portfolio", b =>
                {
                    b.HasOne("FinancialAnalyst.Common.Entities.Users.User", null)
                        .WithMany("Portfolios")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FinancialAnalyst.Common.Entities.Portfolios.PortfolioBalance", b =>
                {
                    b.HasOne("FinancialAnalyst.Common.Entities.Portfolios.Portfolio", null)
                        .WithMany("Balances")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FinancialAnalyst.Common.Entities.Portfolios.Transaction", b =>
                {
                    b.HasOne("FinancialAnalyst.Common.Entities.Assets.AssetBase", "Asset")
                        .WithMany()
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FinancialAnalyst.Common.Entities.Portfolios.Portfolio", null)
                        .WithMany("Transactions")
                        .HasForeignKey("PortfolioId");

                    b.HasOne("FinancialAnalyst.Common.Entities.Users.User", null)
                        .WithMany("Transactions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FinancialAnalyst.Common.Entities.Prices.HistoricalPrice", b =>
                {
                    b.HasOne("FinancialAnalyst.Common.Entities.Assets.AssetBase", "Asset")
                        .WithMany("HistoricalPrices")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FinancialAnalyst.Common.Entities.Assets.Option", b =>
                {
                    b.HasOne("FinancialAnalyst.Common.Entities.Assets.AssetBase", "UnderlyingAsset")
                        .WithMany()
                        .HasForeignKey("UnderlyingAssetId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
